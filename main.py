import os
from PIL import Image
from conversion_DMC import load_dmc_colors, find_closest_dmc, create_dmc_image
import subprocess

# Set paths for files
input_image_path = 'test.jpg'  # The initial image filename to process
dmc_csv_path = 'DMC_colors_github.csv'  # Path to the DMC color CSV file
unique_colors_path = '/Users/danm/Documents/Embroided/unique_colors.txt'  # Path where polina_tool.py saves unique RGB colors
output_image_path = 'results/dmc_colors_output.jpg'  # Path for the final output image with DMC colors and details

# Ensure necessary directories exist
os.makedirs('results', exist_ok=True)

# Step 1: Run `polina_tool.py` as a subprocess to handle initial processing
print("Running initial processing with polina_tool.py...")
try:
    subprocess.run(['python', 'polina_tool.py'], check=True)
    print("polina_tool.py executed successfully.")
except subprocess.CalledProcessError as e:
    print(f"Error occurred while running polina_tool.py: {e}")
    exit(1)

# Step 2: Read unique RGB colors from `unique_colors.txt` generated by `polina_tool.py`
def read_rgb_values_from_file(file_path):
    """
    Reads RGB values from the specified file and returns them as a list of tuples.

    Parameters:
    - file_path: Path to the file containing RGB values.

    Returns:
    - rgb_colors: List of RGB tuples, e.g., [(0, 0, 0), (254, 254, 254), ...]
    """
    rgb_colors = []
    try:
        with open(file_path, "r") as file:
            for line in file:
                # Remove `np.int64` and parentheses, then split into individual values
                line_clean = line.replace("np.int64", "").replace("(", "").replace(")", "").strip()
                
                # Check if the cleaned line is not empty
                if line_clean:
                    # Convert the cleaned line into a tuple of integers
                    rgb_tuple = tuple(map(int, line_clean.split(",")))
                    rgb_colors.append(rgb_tuple)
    except FileNotFoundError:
        print(f"Error: File '{file_path}' not found.")
        exit(1)
    except ValueError as e:
        print(f"ValueError occurred while reading the file: {e}")
        exit(1)
    except Exception as e:
        print(f"An error occurred while reading the file: {e}")
        exit(1)

    return rgb_colors


# Step 3: Read the unique colors from the file
print(f"Reading unique RGB colors from {unique_colors_path}...")
unique_rgb_colors = read_rgb_values_from_file(unique_colors_path)
print(f"Read {len(unique_rgb_colors)} unique RGB colors.")

# Step 4: Load DMC colors from the CSV
print("Loading DMC colors...")
dmc_colors = load_dmc_colors(dmc_csv_path)

# Step 5: Find the closest DMC match for each unique color
print("Finding closest DMC matches...")
dmc_matches = [find_closest_dmc(color, dmc_colors) for color in unique_rgb_colors]

# Step 6: Create the final output image with DMC details
print("Creating output image with DMC colors and details...")
create_dmc_image(unique_rgb_colors, dmc_matches, output_path=output_image_path)

print("Process completed successfully!")
